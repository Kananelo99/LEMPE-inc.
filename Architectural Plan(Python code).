import pygame
import numpy as np
import sys
import math

WIDTH, HEIGHT = 800, 600
BLACK = (10, 10, 10)
WHITE = (240, 240, 240)

pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("4D Rotational Landscape")

# Define vertices of a tesseract (4D cube)
def generate_tesseract():
    vertices = []
    for x in [-1, 1]:
        for y in [-1, 1]:
            for z in [-1, 1]:
                for w in [-1, 1]:
                    vertices.append(np.array([x, y, z, w]))
    return vertices

# 4D rotation matrices
def rotate_4d(vec, angle, i, j):
    mat = np.identity(4)
    c, s = math.cos(angle), math.sin(angle)
    mat[i, i] = c
    mat[i, j] = -s
    mat[j, i] = s
    mat[j, j] = c
    return vec @ mat

# Project 4D -> 3D
def project_4d_to_3d(point, distance=3):
    w = 1 / (distance - point[3])
    projection_matrix = np.array([
        [w, 0, 0],
        [0, w, 0],
        [0, 0, w]
    ])
    return projection_matrix @ point[:3]

# Project 3D -> 2D (simple perspective)
def project_3d_to_2d(point, fov=500):
    factor = fov / (fov + point[2])
    x = point[0] * factor + WIDTH // 2
    y = -point[1] * factor + HEIGHT // 2
    return (int(x), int(y))

def connect_edges(projected_points, edges):
    for edge in edges:
        pygame.draw.line(screen, WHITE, projected_points[edge[0]], projected_points[edge[1]], 1)
____________
Lifts and escalators

import pygame
import sys

# Settings
WIDTH, HEIGHT = 800, 600
BG_COLOR = (30, 30, 30)
ESCALATOR_COLOR = (100, 100, 255)
LIFT_COLOR = (200, 200, 0)
SHAFT_COLOR = (80, 80, 80)
FLOORS = 5
LIFT_WIDTH, LIFT_HEIGHT = 60, 40
ESCALATOR_WIDTH, ESCALATOR_HEIGHT = 150, 20

pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Escalators and Lifts")
clock = pygame.time.Clock()

# Escalator properties
escalator_start = (150, 500)
escalator_end = (300, 200)
escalator_steps = 10
step_offset = 0

# Lift properties
lift_x = 600
lift_floor = 0
lift_direction = 1  # 1=up, -1=down
lift_speed = 1

def draw_escalator(offset):
    # Draw escalator body
    pygame.draw.line(screen, ESCALATOR_COLOR, escalator_start, escalator_end, ESCALATOR_HEIGHT)
    # Draw steps
    for i in range(escalator_steps):
        t = i / (escalator_steps - 1)
        x = escalator_start[0] + t * (escalator_end[0] - escalator_start[0])
        y = escalator_start[1] + t * (escalator_end[1] - escalator_start[1])
        # Animate steps moving up
        y += ((offset + i * 10) % 100) - 50
        pygame.draw.rect(screen, (180, 180, 255), (x - 20, y - 5, 40, 10))

def draw_lift(floor):
    # Draw shaft
    pygame.draw.rect(screen, SHAFT_COLOR, (lift_x, 100, LIFT_WIDTH, HEIGHT - 200))
    # Draw floors
    for f in range(FLOORS):
        y = HEIGHT - 100 - f * ((HEIGHT - 200) // (FLOORS - 1))
        pygame.draw.line(screen, (80, 80, 80), (lift_x, y), (lift_x + LIFT_WIDTH, y), 2)
    # Draw lift
    lift_y = HEIGHT - 100 - floor * ((HEIGHT - 200) // (FLOORS - 1)) - LIFT_HEIGHT
    pygame.draw.rect(screen, LIFT_COLOR, (lift_x, lift_y, LIFT_WIDTH, LIFT_HEIGHT))

def main():
    global step_offset, lift_floor, lift_direction
    running = True
    while running:
        screen.fill(BG_COLOR)
        draw_escalator(step_offset)
        draw_lift(lift_floor)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Animate escalator steps
        step_offset += 2
        if step_offset > 100:
            step_offset = 0

        # Animate lift
        if lift_direction == 1:
            lift_floor += lift_speed * 0.02
            if lift_floor >= FLOORS - 1:
                lift_floor = FLOORS - 1
                lift_direction = -1
        else:
            lift_floor -= lift_speed * 0.02
            if lift_floor <= 0:
                lift_floor = 0
                lift_direction = 1

        pygame.display.flip()
        clock.tick(60)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
____________
def main():
    clock = pygame.time.Clock()
    vertices = generate_tesseract()

    # Edges for a tesseract (from vertex indices)
    edges = []
    for i in range(len(vertices)):
        for j in range(i + 1, len(vertices)):
            if np.sum(np.abs(vertices[i] - vertices[j])) == 2:
                edges.append((i, j))

    angle = 0
    running = True
    while running:
        clock.tick(60)
        screen.fill(BLACK)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        projected_points = []
        for v in vertices:
            rotated = rotate_4d(v, angle, 0, 3)  # Rotate in x-w
            rotated = rotate_4d(rotated, angle / 2, 1, 2)  # Rotate in y-z
            projected3d = project_4d_to_3d(rotated)
            projected2d = project_3d_to_2d(projected3d)
            projected_points.append(projected2d)

        connect_edges(projected_points, edges)
        pygame.display.flip()
        angle += 0.01

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()

_________
Underground Parking
_________ 
This code will display a grid representing parking spots, with purple spots indicating occupied spaces. You can expand this basic design to add entrances, exits, ramps, multiple underground levels, or integrations with sensors and automation
_________


import pygame
import sys

# Constants
WIDTH, HEIGHT = 800, 600
ROWS, COLS = 6, 10  # Grid size: 6 rows, 10 columns
SPOT_SIZE = 60
MARGIN = 10
PARKING_COLOR = (180, 180, 180)
OCCUPIED_COLOR = (128, 0, 128)  # Purple for occupied
FREE_COLOR = (50, 200, 50)
BG_COLOR = (30, 30, 30)

# Example occupied spots (row, col)
occupied_spots = [(1, 2), (3, 5), (5, 6), (0, 0), (4, 3)]

pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Underground Parking Design")
clock = pygame.time.Clock()

def draw_parking_lot():
    screen.fill(BG_COLOR)
    for row in range(ROWS):
        for col in range(COLS):
            x = MARGIN + col * (SPOT_SIZE + MARGIN)
            y = MARGIN + row * (SPOT_SIZE + MARGIN)
            rect = pygame.Rect(x, y, SPOT_SIZE, SPOT_SIZE)
            if (row, col) in occupied_spots:
                color = OCCUPIED_COLOR
            else:
                color = FREE_COLOR
            pygame.draw.rect(screen, color, rect)
            pygame.draw.rect(screen, PARKING_COLOR, rect, 3)  # border

def main():
    running = True
    while running:
        draw_parking_lot()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        pygame.display.flip()
        clock.tick(30)
    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
